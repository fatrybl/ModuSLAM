Алгоритм формирования ребра для входящего измерения Z.

Основные идеи:
1. Фабрика рёбер знает, сколько рёбер должно быть создано из одного измерения Z.
2. Фабрика знает, какие вершины нужны для создания ребра.
3. Фабрика знает, какие вершины должны быть обязательно созданы и не требуют поиска.
4. Фабрика знает, какие вершины надо искать.
5. Фабрика сама решает, как искать вершины для стыковки.
6. Фабрика должна иметь доступ ко всем вершинам из G_t-1.

Примеры:

======Фабрика создания унарного ребра (GPS)=======

1. Берём последнюю (по времени) вершину из G_t-1 типа Pose.
2. Используем значение последней позы для инита значения новой.
3. Генерируем индекс новой вершины.
4. Создаем вершину Pose (типа Х) с этими параметрами.
5. Добавляем новую Pose в DB_t


======Фабрика создания бинарного ребра (Odometry)=======

1. Смотрим на время измерения t, на start/stop измерения. Определяем, в какой стороне искать вершину.
2. если t == start:
    2.1 ищем в DB_t кластер с временем t==start.
        нашли: ищем в кластере вершину типа Pose.
            нашли: используем её для ребра.
            не нашли: создаём, используя механизм создания новой вершины.
                кладём в DB_t
        не нашли:
            создаем кластер и новую вершину.
    если t == stop:
    2.2 всё то же самое, но теперь в DB_t-1 + DB_t.
3. Добавляем новые позы (если есть) в ДБ.


======Фабрика создания бинарного ребра (Landmark)=======

1. Берём последнюю (по времени) вершину из G_t-1 типа Pose (или LandmarkPose?)
2. Используем ее данные для создания новой позы.
3. Проверяем, есть ли текущий маячок в списке увиденных маяков.
    Да: используем
    Нет: создаем новую вершину, кладем в DB_t.


======Фабрика создания ребра (IMU-odometry)=======

1. Ребро имеет start/stop время.
2. Ищем кластер в (DB_t-1 + DB_t), в который входит время start.
3. Нашли: ищем Позу
        нашлиЖ
